import java.lang.reflect.Array;
import java.util.Arrays;

public class apps {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * 1. Create an array of int called ages that contains the following values: 3,
		 * 9, 23, 64, 2, 8, 28, 93.
		 * 
		 * /* Programmatically subtract the value of the first element in the array from
		 * the value in the last element of the array (i.e. do not use ages[7] in your
		 * code).
		 */

		// b. Add a new age to your array and repeat the step above to ensure it is
		// dynamic (works for arrays of different lengths).
		// c. Use a loop to iterate through the array and calculate the average age.
		// Print the result to the console.*/

		int[] ages = new int[9];
		ages[0] = 3;
		ages[1] = 9;
		ages[2] = 23;
		ages[3] = 64;
		ages[4] = 2;
		ages[5] = 8;
		ages[6] = 28;
		ages[7] = 93;
		ages[8] = 150;
		System.out.println(ages[ages.length - 1] - ages[0]);

		int[] nums = { 3, 9, 23, 64, 2, 8, 28, 93, 150 };
		int sum = 0;

		int i = 0;
		while (i < nums.length) {
			sum += nums[i];
			i++;
		}
		float average = (sum / nums.length);
		System.out.println("Average: " + average);

		/*
		 * 2. Create an array of String called names that contains the following values:
		 * “Sam”, “Tommy”, “Tim”, “Sally”, “Buck”, “Bob”.
		 */

		String[] names = new String[6];
		names[0] = "Sam";
		names[1] = "Tommy";
		names[2] = "Tim";
		names[3] = "Sally";
		names[4] = "Buck";
		names[5] = "Bob";

		/*
		 * a. Use a loop to iterate through the array and calculate the average number
		 * of letters per name. Print the result to the console.
		 */

		sum = 0;
		i = 0;

		while (i < names.length) {
			sum += names[i].length();
			i++;
		}
		average = (sum / names.length);
		System.out.println("Average:" + average);
	
		/*
		 * b. Use a loop to iterate through the array again and concatenate all the
		 * names together, separated by spaces, and print the result to the console.
		 */
		String concateName = "";
		for (int n = 0; n < names.length; n++) {
			concateName += names[n];
//			concateName= concateName + names[n];
		}
		System.out.println(concateName);

		// 3. How do you access the last element of any array?
		// nameOfArray[nameOfArray.length-1]
		// 4. How do you access the first element of any array?nameOfArray[0]

		// 5. Create a new array of int called nameLengths. Write a loop to iterate over
		// the previously created names array and add the length of each name to the
		// nameLengths array.

		int[] nameLengths = new int[names.length];

		i = 0;
		for (int n = 0; n < names.length; n++) {
			nameLengths[i] = names[i].length();

		}
		System.out.println(Arrays.toString(nameLengths));

		// 6. Write a loop to iterate over the nameLengths array and calculate the sum
		// of all the elements in the array. Print the result to the console.

		// 7. Write a method that takes a String, word, and an int, n, as arguments and
		// returns the word concatenated to itself n number of times. (i.e. if I pass in
		// “Hello” and 3, I would expect the method to return “HelloHelloHello”).//
		System.out.println(multiplyName("Hello", 3));

		// 8. Write a method that takes two Strings, firstName and lastName, and returns
		// a full name (the full name should be the first and the last name as a String
		// separated by a space).
		String firstName = "Jude";
		String lastName = "Croods";
		String fullName = createName(firstName, lastName);

		System.out.println(fullName);

		// 9. Write a method that takes an array of int and returns true if the sum of
		// all the ints in the array is greater than 100.
		int[] totals = { 50, 20, 99, 100 };
		System.out.println(sumArrays(totals));
		// 11. Write a method that takes two arrays of double and returns true if the
		// average of the elements in the first array is greater than the average of the
		// elements in the second array.
		
		static boolean arrayAvgCompare(double[] arrayOne, double[] arrayTwo) {
			double averageOne = 0;
			for (int a = 0; a < arrayOne.length; a++) {
				averageOne += arrayOne[a];
			} 
				averageOne = average / arrayOne.length;
			double averageTwo = 0;
			for (int b = 0; b < arrayTwo.length; b++ ) {
				averageTwo += arrayTwo[b];
			}
			averageTwo = averageTwo / arrayOne.length;
			if (averageOne > averageTwo) {
					return true;
			}
				else {
					return false;
				}
		}


		// 12. Write a method called willBuyDrink that takes a boolean isHotOutside, and
		// a double moneyInPocket, and returns true if it is hot outside and if
		// moneyInPocket is greater than 10.50.
		double moneyInPocket = 11.00;
		boolean isHotOutside = true;
		System.out.println(willBuyDrink(isHotOutside, moneyInPocket));

	}

	// 7. Write a method that takes a String, word, and an int, n, as arguments and
	// returns the word concatenated to itself n number of times. (i.e. if I pass in
	// “Hello” and 3, I would expect the method to return “HelloHelloHello”).//
	public static String multiplyName(String word, int n) {
		String str = "";
		for (int i = 0; i < n; i++) {
			str += word;
		}
		return str;
	}

	// 8. Write a method that takes two Strings, firstName and lastName, and returns
	// a full name (the full name should be the first and the last name as a String
	// separated by a space).

	public static String createName(String x, String y) {
		return x + " " + y;

	}

	// 9. Write a method that takes an array of int and returns true if the sum of
	// all the ints in the array is greater than 100.
	public static boolean sumArrays(int[] totals) {
		int sum = 0;
		for (int i = 0; i < totals.length; i++)
			sum += totals[i];
		if (sum > 100) {
			return true;
		} else {
			return false;
		}
	}

	// 10. Write a method that takes an array of double and returns the average of
	// all the elements in the array.
	public static double average(double[] numbers) {
		double sum = 0;
		for (double number : numbers) {
			sum += number;
		}
		return sum / numbers.length;
	}

	// 11. Write a method that takes two arrays of double and returns true if the
	// average of the elements in the first array is greater than the average of the
	// elements in the second array.
	
	public static int arrayAverage(int[] a) {
		int total = 0;
		for ( int i = 0; i<arrayOne.length; i++) {
			total += arrayOne[i];
		}
		int second = total/arrayOne.length;
		return second;
	}

	// 12. Write a method called willBuyDrink that takes a boolean isHotOutside, and
	// a double moneyInPocket, and returns true if it is hot outside and if
	// moneyInPocket is greater than 10.50.
	public static boolean willBuyDrink(boolean isHotOutside, double moneyInPocket) {

		if ((isHotOutside = true) && (moneyInPocket > 10.50)) {
			return true;
		} else {
			return false;
		}

	}
}
